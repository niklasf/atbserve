/*
  Stockfish, a UCI chess playing engine derived from Glaurung 2.1
  Copyright (C) 2004-2008 Tord Romstad (Glaurung author)
  Copyright (C) 2008-2015 Marco Costalba, Joona Kiiski, Tord Romstad
  Copyright (C) 2015-2016 Marco Costalba, Joona Kiiski, Gary Linscott, Tord Romstad

  Stockfish is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Stockfish is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <algorithm>

#include "types.h"

Value TempoValue[VARIANT_NB][PHASE_NB] = {
  { TempoMg, TempoEg },
#ifdef ANTI
  { TempoMgAnti, TempoEgAnti },
#endif
#ifdef ATOMIC
  { TempoMgAtomic, TempoEgAtomic },
#endif
#ifdef CRAZYHOUSE
  { TempoMgHouse, TempoEgHouse },
#endif
#ifdef HORDE
  { TempoMgHorde, TempoEgHorde },
#endif
#ifdef KOTH
  { TempoMg, TempoEg },
#endif
#ifdef LOSERS
  { TempoMgLosers, TempoEgLosers },
#endif
#ifdef RACE
  { TempoMgRace, TempoEgRace },
#endif
#ifdef RELAY
  { TempoMgRelay, TempoEgRelay },
#endif
#ifdef THREECHECK
  { TempoMgThreeCheck, TempoEgThreeCheck },
#endif
};
Value PieceValue[VARIANT_NB][PHASE_NB][PIECE_NB] = {
{
  { VALUE_ZERO, PawnValueMg, KnightValueMg, BishopValueMg, RookValueMg, QueenValueMg },
  { VALUE_ZERO, PawnValueEg, KnightValueEg, BishopValueEg, RookValueEg, QueenValueEg },
},
#ifdef ANTI
{
  { VALUE_ZERO, PawnValueMgAnti, KnightValueMgAnti, BishopValueMgAnti, RookValueMgAnti, QueenValueMgAnti, KingValueMgAnti },
  { VALUE_ZERO, PawnValueEgAnti, KnightValueEgAnti, BishopValueEgAnti, RookValueEgAnti, QueenValueEgAnti, KingValueEgAnti },
},
#endif
#ifdef ATOMIC
{
  { VALUE_ZERO, PawnValueMgAtomic, KnightValueMgAtomic, BishopValueMgAtomic, RookValueMgAtomic, QueenValueMgAtomic },
  { VALUE_ZERO, PawnValueEgAtomic, KnightValueEgAtomic, BishopValueEgAtomic, RookValueEgAtomic, QueenValueEgAtomic },
},
#endif
#ifdef CRAZYHOUSE
{
  { VALUE_ZERO, PawnValueMgHouse, KnightValueMgHouse, BishopValueMgHouse, RookValueMgHouse, QueenValueMgHouse },
  { VALUE_ZERO, PawnValueEgHouse, KnightValueEgHouse, BishopValueEgHouse, RookValueEgHouse, QueenValueEgHouse },
},
#endif
#ifdef HORDE
{
  { VALUE_ZERO, PawnValueMgHorde, KnightValueMgHorde, BishopValueMgHorde, RookValueMgHorde, QueenValueMgHorde, KingValueMgHorde },
  { VALUE_ZERO, PawnValueEgHorde, KnightValueEgHorde, BishopValueEgHorde, RookValueEgHorde, QueenValueEgHorde, KingValueEgHorde },
},
#endif
#ifdef KOTH
{
  { VALUE_ZERO, PawnValueMgHill, KnightValueMgHill, BishopValueMgHill, RookValueMgHill, QueenValueMgHill },
  { VALUE_ZERO, PawnValueEgHill, KnightValueEgHill, BishopValueEgHill, RookValueEgHill, QueenValueEgHill },
},
#endif
#ifdef LOSERS
{
  { VALUE_ZERO, PawnValueMgLosers, KnightValueMgLosers, BishopValueMgLosers, RookValueMgLosers, QueenValueMgLosers },
  { VALUE_ZERO, PawnValueEgLosers, KnightValueEgLosers, BishopValueEgLosers, RookValueEgLosers, QueenValueEgLosers },
},
#endif
#ifdef RACE
{
  { VALUE_ZERO, VALUE_ZERO, KnightValueMgRace, BishopValueMgRace, RookValueMgRace, QueenValueMgRace },
  { VALUE_ZERO, VALUE_ZERO, KnightValueEgRace, BishopValueEgRace, RookValueEgRace, QueenValueEgRace },
},
#endif
#ifdef RELAY
{
  { VALUE_ZERO, PawnValueMg, KnightValueMg, BishopValueMg, RookValueMg, QueenValueMg },
  { VALUE_ZERO, PawnValueEg, KnightValueEg, BishopValueEg, RookValueEg, QueenValueEg },
},
#endif
#ifdef THREECHECK
{
  { VALUE_ZERO, PawnValueMgThreeCheck, KnightValueMgThreeCheck, BishopValueMgThreeCheck, RookValueMgThreeCheck, QueenValueMgThreeCheck },
  { VALUE_ZERO, PawnValueEgThreeCheck, KnightValueEgThreeCheck, BishopValueEgThreeCheck, RookValueEgThreeCheck, QueenValueEgThreeCheck },
},
#endif
};

namespace PSQT {

#define S(mg, eg) make_score(mg, eg)

// Bonus[PieceType][Square / 2] contains Piece-Square scores. For each piece
// type on a given square a (middlegame, endgame) score pair is assigned. Table
// is defined for files A..D and white side: it is symmetric for black side and
// second half of the files.
const Score Bonus[VARIANT_NB][PIECE_TYPE_NB][RANK_NB][int(FILE_NB) / 2] = {
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(260,  0), S(313, 48), S(263, 75), S(188, 84) },
      { S(258, 42), S(298, 91), S(232,142), S(174,131) },
      { S(195, 81), S(240,136), S(171,167), S(105,163) },
      { S(173,103), S(181,166), S(144,166), S(106,176) },
      { S(146,104), S(174,159), S(112,196), S( 63,199) },
      { S(116, 90), S(157,150), S( 82,171), S( 39,169) },
      { S( 85, 44), S(127, 93), S( 62,114), S( 17,133) },
      { S( 63,  2), S( 89, 48), S( 47, 73), S(  0, 83) }
    }
  },
#ifdef ANTI
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(291, 28), S(344, 76), S(294,103), S(219,112) },
      { S(289, 70), S(329,119), S(263,170), S(205,159) },
      { S(226,109), S(271,164), S(202,195), S(136,191) },
      { S(204,131), S(212,194), S(175,194), S(137,204) },
      { S(177,132), S(205,187), S(143,224), S( 94,227) },
      { S(147,118), S(188,178), S(113,199), S( 70,197) },
      { S(116, 72), S(158,121), S( 93,142), S( 48,161) },
      { S( 94, 30), S(120, 76), S( 78,101), S( 31,111) }
    }
  },
#endif
#ifdef ATOMIC
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(260,  0), S(313, 48), S(263, 75), S(188, 84) },
      { S(258, 42), S(298, 91), S(232,142), S(174,131) },
      { S(195, 81), S(240,136), S(171,167), S(105,163) },
      { S(173,103), S(181,166), S(144,166), S(106,176) },
      { S(146,104), S(174,159), S(112,196), S( 63,199) },
      { S(116, 90), S(157,150), S( 82,171), S( 39,169) },
      { S( 85, 44), S(127, 93), S( 62,114), S( 17,133) },
      { S( 63,  2), S( 89, 48), S( 47, 73), S(  0, 83) }
    }
  },
#endif
#ifdef CRAZYHOUSE
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(320,212), S(474,410), S(237, 64), S(133, 65) },
      { S(247,107), S(321, 77), S(292, 50), S(191, -4) },
      { S(198, 19), S(281, 79), S(231, 91), S(141, 87) },
      { S(263, 91), S(223,190), S(157,200), S(242,145) },
      { S(177,132), S(205,187), S(143,224), S( 94,227) },
      { S(147,118), S(188,178), S(113,199), S( 70,197) },
      { S(116, 72), S(158,121), S( 93,142), S( 48,161) },
      { S( 94, 30), S(120, 76), S( 78,101), S( 31,111) }
    }
  },
#endif
#ifdef HORDE
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(230, 28), S(390,-35), S(397,146), S(352, 83) },
      { S(243, 37), S(274, 74), S(348,229), S(296,393) },
      { S(236, 25), S(305,105), S(255, 95), S(254,188) },
      { S(246,175), S(267,245), S(180,249), S(  0,  0) },
      { S(151,120), S(199,207), S(156,231), S(  0,  0) },
      { S(177,107), S(189,230), S(141,172), S(211,251) },
      { S( 26, 36), S(164,145), S(102,139), S(-42,133) },
      { S(147,  2), S(186,  7), S( 49, 79), S( 48, 50) }
    }
  },
#endif
#ifdef KOTH
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(230, 28), S(390,-35), S(397,146), S(352, 83) },
      { S(243, 37), S(274, 74), S(348,229), S(296,393) },
      { S(236, 25), S(305,105), S(255, 95), S(254,188) },
      { S(246,175), S(267,245), S(180,249), S(  0,  0) },
      { S(151,120), S(199,207), S(156,231), S(  0,  0) },
      { S(177,107), S(189,230), S(141,172), S(211,251) },
      { S( 26, 36), S(164,145), S(102,139), S(-42,133) },
      { S(147,  2), S(186,  7), S( 49, 79), S( 48, 50) }
    }
  },
#endif
#ifdef LOSERS
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(260,  0), S(313, 48), S(263, 75), S(188, 84) },
      { S(258, 42), S(298, 91), S(232,142), S(174,131) },
      { S(195, 81), S(240,136), S(171,167), S(105,163) },
      { S(173,103), S(181,166), S(144,166), S(106,176) },
      { S(146,104), S(174,159), S(112,196), S( 63,199) },
      { S(116, 90), S(157,150), S( 82,171), S( 39,169) },
      { S( 85, 44), S(127, 93), S( 62,114), S( 17,133) },
      { S( 63,  2), S( 89, 48), S( 47, 73), S(  0, 83) }
    }
  },
#endif
#ifdef RACE
  {
    { },
    { // Pawn
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(260,  0), S(313, 48), S(263, 75), S(188, 84) },
      { S(258, 42), S(298, 91), S(232,142), S(174,131) },
      { S(195, 81), S(240,136), S(171,167), S(105,163) },
      { S(173,103), S(181,166), S(144,166), S(106,176) },
      { S(146,104), S(174,159), S(112,196), S( 63,199) },
      { S(116, 90), S(157,150), S( 82,171), S( 39,169) },
      { S( 85, 44), S(127, 93), S( 62,114), S( 17,133) },
      { S( 63,  2), S( 89, 48), S( 47, 73), S(  0, 83) }
    }
  },
#endif
#ifdef RELAY
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(260,  0), S(313, 48), S(263, 75), S(188, 84) },
      { S(258, 42), S(298, 91), S(232,142), S(174,131) },
      { S(195, 81), S(240,136), S(171,167), S(105,163) },
      { S(173,103), S(181,166), S(144,166), S(106,176) },
      { S(146,104), S(174,159), S(112,196), S( 63,199) },
      { S(116, 90), S(157,150), S( 82,171), S( 39,169) },
      { S( 85, 44), S(127, 93), S( 62,114), S( 17,133) },
      { S( 63,  2), S( 89, 48), S( 47, 73), S(  0, 83) }
    }
  },
#endif
#ifdef THREECHECK
  {
    { },
    { // Pawn
      { S(  0, 0), S(  0, 0), S(  0, 0), S( 0, 0) },
      { S(-11, 7), S(  6,-4), S(  7, 8), S( 3,-2) },
      { S(-18,-4), S( -2,-5), S( 19, 5), S(24, 4) },
      { S(-17, 3), S( -9, 3), S( 20,-8), S(35,-3) },
      { S( -6, 8), S(  5, 9), S(  3, 7), S(21,-6) },
      { S( -6, 8), S( -8,-5), S( -6, 2), S(-2, 4) },
      { S( -4, 3), S( 20,-9), S( -8, 1), S(-4,18) }
    },
    { // Knight
      { S(-143, -97), S(-96,-82), S(-80,-46), S(-73,-14) },
      { S( -83, -69), S(-43,-55), S(-21,-17), S(-10,  9) },
      { S( -71, -50), S(-22,-39), S(  0, -8), S(  9, 28) },
      { S( -25, -41), S( 18,-25), S( 43,  7), S( 47, 38) },
      { S( -26, -46), S( 16,-25), S( 38,  2), S( 50, 41) },
      { S( -11, -55), S( 37,-38), S( 56, -8), S( 71, 27) },
      { S( -62, -64), S(-17,-50), S(  5,-24), S( 14, 13) },
      { S(-195,-110), S(-66,-90), S(-42,-50), S(-29,-13) }
    },
    { // Bishop
      { S(-54,-68), S(-23,-40), S(-35,-46), S(-44,-28) },
      { S(-30,-43), S( 10,-17), S(  2,-23), S( -9, -5) },
      { S(-19,-32), S( 17, -9), S( 11,-13), S(  1,  8) },
      { S(-21,-36), S( 18,-13), S( 11,-15), S(  0,  7) },
      { S(-21,-36), S( 14,-14), S(  6,-17), S( -1,  3) },
      { S(-27,-35), S(  6,-13), S(  2,-10), S( -8,  1) },
      { S(-33,-44), S(  7,-21), S( -4,-22), S(-12, -4) },
      { S(-45,-65), S(-21,-42), S(-29,-46), S(-39,-27) }
    },
    { // Rook
      { S(-25, 0), S(-16, 0), S(-16, 0), S(-9, 0) },
      { S(-21, 0), S( -8, 0), S( -3, 0), S( 0, 0) },
      { S(-21, 0), S( -9, 0), S( -4, 0), S( 2, 0) },
      { S(-22, 0), S( -6, 0), S( -1, 0), S( 2, 0) },
      { S(-22, 0), S( -7, 0), S(  0, 0), S( 1, 0) },
      { S(-21, 0), S( -7, 0), S(  0, 0), S( 2, 0) },
      { S(-12, 0), S(  4, 0), S(  8, 0), S(12, 0) },
      { S(-23, 0), S(-15, 0), S(-11, 0), S(-5, 0) }
    },
    { // Queen
      { S( 0,-70), S(-3,-57), S(-4,-41), S(-1,-29) },
      { S(-4,-58), S( 6,-30), S( 9,-21), S( 8, -4) },
      { S(-2,-39), S( 6,-17), S( 9, -7), S( 9,  5) },
      { S(-1,-29), S( 8, -5), S(10,  9), S( 7, 17) },
      { S(-3,-27), S( 9, -5), S( 8, 10), S( 7, 23) },
      { S(-2,-40), S( 6,-16), S( 8,-11), S(10,  3) },
      { S(-2,-54), S( 7,-30), S( 7,-21), S( 6, -7) },
      { S(-1,-75), S(-4,-54), S(-1,-44), S( 0,-30) }
    },
    { // King
      { S(260,  0), S(313, 48), S(263, 75), S(188, 84) },
      { S(258, 42), S(298, 91), S(232,142), S(174,131) },
      { S(195, 81), S(240,136), S(171,167), S(105,163) },
      { S(173,103), S(181,166), S(144,166), S(106,176) },
      { S(146,104), S(174,159), S(112,196), S( 63,199) },
      { S(116, 90), S(157,150), S( 82,171), S( 39,169) },
      { S( 85, 44), S(127, 93), S( 62,114), S( 17,133) },
      { S( 63,  2), S( 89, 48), S( 47, 73), S(  0, 83) }
    }
  },
#endif
};

#ifdef CRAZYHOUSE
Score psq[VARIANT_NB][PIECE_NB][SQUARE_NB+1];
const Score inHandBonus[PIECE_TYPE_NB] = {
    S(0, 0), S(47, 16), S(44, 30), S(12, 5), S(11, 0), S(26, 7)
};
#else
Score psq[VARIANT_NB][PIECE_NB][SQUARE_NB];
#endif

#undef S

// init() initializes piece-square tables: the white halves of the tables are
// copied from Bonus[] adding the piece value, then the black halves of the
// tables are initialized by flipping and changing the sign of the white scores.
void init() {

  for (Variant var = CHESS_VARIANT; var < VARIANT_NB; ++var)
      for (Piece pc = W_PAWN; pc <= W_KING; ++pc)
      {
          PieceValue[var][MG][~pc] = PieceValue[var][MG][pc];
          PieceValue[var][EG][~pc] = PieceValue[var][EG][pc];

          Score v = make_score(PieceValue[var][MG][pc], PieceValue[var][EG][pc]);
#ifdef ANTI
          if (var == ANTI_VARIANT)
              v = -v;
#endif

          for (Square s = SQ_A1; s <= SQ_H8; ++s)
          {
              File f = std::min(file_of(s), FILE_H - file_of(s));
              psq[var][ pc][ s] = v + Bonus[var][pc][rank_of(s)][f];
              psq[var][~pc][~s] = -psq[var][pc][s];
          }
#ifdef CRAZYHOUSE
          psq[var][ pc][SQ_NONE] = v + inHandBonus[type_of(pc)];
          psq[var][~pc][SQ_NONE] = -psq[var][pc][SQ_NONE];
#endif
      }
}

} // namespace PSQT
